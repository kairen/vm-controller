// Code generated by go-bindata.
// sources:
// api/swagger/v1alpha1.yml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerV1alpha1Yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\xdf\x6f\xdb\x36\x10\x7e\xd7\x5f\x71\x50\x06\xe8\x65\x91\x64\xcd\x5d\x13\x61\x0f\xcb\x92\xa2\x08\x50\x17\x45\xb3\xe6\x75\xa0\xa9\xb3\xcc\x45\x22\x39\xf2\xe4\xcc\x2d\xf6\xbf\x0f\x14\xe9\x5f\xad\xed\xd8\x6e\x3a\x60\xf5\x83\x21\x51\xbc\x8f\xdf\x7d\xdf\x1d\x45\xd9\x47\x56\xd7\x68\x4a\x88\x8b\x34\x8f\x23\x21\x27\xaa\x8c\x00\x48\x50\x83\x25\xdc\x8f\xe0\xea\xdd\x6d\x04\x50\xa1\xe5\x46\x68\x12\x4a\x96\x70\xfd\xfe\xc3\x0d\x30\xb8\x1f\x45\x00\x33\x34\xb6\x1f\xcc\xd3\x41\x9a\x47\x00\x5c\x49\x62\x9c\x1c\x08\x00\xb6\x4c\x34\x25\x3c\x14\xa6\x48\xc7\x4c\xfc\x5a\xbb\xfb\x94\xab\x36\x02\x68\x04\x47\x69\xd1\x4f\x94\xac\xc5\x12\xae\x34\xe3\x53\x84\xa2\x07\x02\xe8\x4c\x53\xc2\x94\x48\x97\x59\xf6\xf8\xf8\x98\xb2\xfe\x71\xaa\x4c\x9d\x85\x60\x9b\xbd\xb9\xbd\x7e\xf5\xf6\xee\xd5\x79\x91\xe6\xe9\x94\xda\x26\x22\x56\xdb\x32\x3a\x0f\x88\x77\x68\x66\x68\x3e\x4f\xc0\x8f\xfa\x3c\x5c\x7e\x96\x4f\xb1\xc5\x3e\xcc\x2d\x17\x69\x46\x53\xeb\x88\xc5\x19\xd3\x22\x9b\x0d\x58\xa3\xa7\x6c\x90\xd9\x3e\xce\xc6\x9e\xb3\x56\x36\xa4\x09\xe0\x57\xf5\xd7\xe7\xab\x55\xdd\xcf\x76\x6d\xcb\xcc\xbc\x84\xe4\xda\x20\x23\x04\x06\x1e\x27\x09\x13\x34\x33\xac\x45\x42\xb3\x86\xe0\xd9\x57\x8c\x58\x18\x02\x10\xb2\x84\xb1\xaa\xe6\xcb\x01\x83\x7f\x75\xc2\x60\x55\x02\x99\x0e\x97\xc3\x7d\x32\xac\x5c\xde\x03\xc4\x3f\x18\x9c\xc4\x25\xc4\x67\x59\x85\x13\x21\x85\x53\xc1\x86\x6c\xe2\x68\x81\x66\xb5\x72\x92\xae\x22\x93\x22\xcf\x93\x75\xa0\x0d\x11\x13\xdb\x71\x8e\x58\x61\x05\x42\x02\x77\xb9\x09\x59\xc3\xfd\x28\x4d\xd6\x42\xbe\x64\xf3\x04\x9f\x3f\x6a\xa4\x78\x45\x61\x98\x5f\xee\xa1\x30\x61\xa2\xc1\x0a\x48\xf9\xf5\xd1\x15\xec\x18\x39\xeb\x2c\x82\x9a\xb8\x3b\x27\x24\x54\x9d\x6e\x04\x67\x2e\x68\x8d\x5c\xf2\x62\x6f\x7a\x5b\xb0\x4b\x40\x63\x94\x09\x18\x35\x1e\x67\xff\x1b\x61\x09\x58\xd3\x04\xfb\x6d\xf2\x3c\xca\x1b\xa4\xce\x48\x27\xfd\xac\x85\x46\x58\x7a\x4a\x7e\x9a\x6b\x2c\x81\x19\xc3\xe6\x1b\xe3\x82\xb0\xb5\x9b\x53\x8f\xf3\xea\x50\x3d\x3d\xe3\x05\xdd\x20\x6a\xb2\xb3\xdd\xb2\x4f\x5d\x27\xaa\x7f\x42\xd7\x1d\xab\xfa\x6b\xa4\x20\x38\x8c\xe7\x70\x7b\xb3\xaf\xeb\x5c\x8b\xb9\xde\x5f\xe6\xe0\xdb\xd0\x2d\x1f\x6d\xaa\x67\xc9\x08\x59\x3f\xd5\x8a\x9b\x02\x84\x5d\xc7\xa1\x7d\x03\xeb\x9f\xb9\xeb\x86\xfb\x38\xf8\x44\xa4\x22\x98\xa8\x4e\x56\xa7\xf4\xd4\xb2\x06\xd6\xec\x77\xb3\x1b\x24\x3c\xca\xdf\x9b\x3e\xe4\x40\x8b\xb7\x9a\xbc\xd5\xe6\x1d\x46\xef\xb4\xfa\xdb\x9b\xdd\x6b\x23\x64\x7d\x82\xd8\x41\xd6\xb5\xdd\x6b\x6f\xa7\x65\x96\x18\x75\xf6\xeb\x1b\xce\xe3\x7c\xcf\xa6\xd4\x48\xfd\x5b\xcf\x67\xfa\x75\x2d\x18\x54\xff\x2f\xbb\xb0\x76\x5e\xf5\xcb\xee\xde\x85\xf9\x14\xf9\x43\xf6\xc9\xd9\x71\xea\x1e\x7c\x3f\x82\xb7\xee\x3d\x7c\x35\x63\xa2\x61\x63\xd1\x08\x9a\xc3\xb5\xc3\x75\xc7\xaf\x13\x2b\xc3\xfd\x3f\x5b\x65\x84\x93\xc2\xe9\x55\xa1\x1e\x92\x43\x8d\xd3\x46\x4d\xc5\x58\x90\x33\xa0\xb3\x78\xac\x6f\x4b\xa7\xce\x60\xa4\x2a\x6c\xe0\x66\x55\x4a\xd1\x5a\x59\x39\x1c\x5f\x23\x1e\xd1\x0b\xa4\xc6\x7f\x22\xa7\x68\x43\x9a\x08\x96\x67\xce\x70\xc9\x75\x17\xae\x5a\x6c\x95\x99\x87\x9b\x4a\xd8\x87\x3b\xf1\xd1\xcf\xd2\x46\x69\x34\x24\x56\x22\x89\xaa\xdc\xff\x9a\xc4\xbf\x59\xab\xdd\x77\xc5\x60\xfb\x2b\xf2\xaa\xeb\x6b\x52\x22\x33\xee\xc0\x35\x9e\x87\x04\xc2\x6c\xd7\xb7\x87\xae\x50\xf1\x9f\x8a\xcb\xc9\xc5\xcb\x6a\x58\xe1\xf0\xe5\xe0\xf2\x82\x4f\xaa\x02\x8b\x01\xff\x79\x90\xbf\x18\xe7\xa7\x11\xe8\x0b\xef\x40\x02\x09\xa1\xa5\xf3\xc1\xc2\x5c\xae\xbb\xcf\x23\x85\x24\xac\x97\xd8\x5b\xd4\xf1\xda\x1f\x1c\x56\xe4\xc3\x8b\x1d\x47\x8f\xd1\x6f\x0b\x1e\x0b\x0b\x0f\x27\x93\xef\xc0\x7c\x2d\x7a\xd0\xd5\xf9\x61\x47\x99\x7d\x59\x27\xff\x2f\x1f\x7f\x5f\xfa\xb8\xb1\x4f\x1f\x9c\x2d\xd7\xdd\x07\x12\x8d\xf8\xd8\x7f\x7f\x1c\xe1\x26\x9c\xc1\x2f\x90\x9f\x0f\xf2\x85\x03\x6e\xe1\x83\x79\xbf\xef\xa4\x5c\x7f\xb0\xa1\x4f\x1c\x9e\xfe\x08\x77\xa4\x34\x30\x59\xc1\x3b\xf7\xd1\x14\xff\x1b\x00\x00\xff\xff\xd9\xe4\x15\x65\x0f\x10\x00\x00")

func apiSwaggerV1alpha1YmlBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerV1alpha1Yml,
		"api/swagger/v1alpha1.yml",
	)
}

func apiSwaggerV1alpha1Yml() (*asset, error) {
	bytes, err := apiSwaggerV1alpha1YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api/swagger/v1alpha1.yml", size: 4111, mode: os.FileMode(420), modTime: time.Unix(1555485061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api/swagger/v1alpha1.yml": apiSwaggerV1alpha1Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api": &bintree{nil, map[string]*bintree{
		"swagger": &bintree{nil, map[string]*bintree{
			"v1alpha1.yml": &bintree{apiSwaggerV1alpha1Yml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

